"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatehomework37"]("main",{

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Calculator: () => (/* binding */ Calculator),\n/* harmony export */   UserProfile: () => (/* binding */ UserProfile),\n/* harmony export */   createPerson: () => (/* binding */ createPerson)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar _class;\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _applyDecoratedDescriptor(i, e, r, n, l) { var a = {}; return Object.keys(n).forEach(function (i) { a[i] = n[i]; }), a.enumerable = !!a.enumerable, a.configurable = !!a.configurable, (\"value\" in a || a.initializer) && (a.writable = !0), a = r.slice().reverse().reduce(function (r, n) { return n(i, e, r) || r; }, a), l && void 0 !== a.initializer && (a.value = a.initializer ? a.initializer.call(l) : void 0, a.initializer = void 0), void 0 === a.initializer ? (Object.defineProperty(i, e, a), null) : a; }\nconsole.log('#20. TypeScript homework example file');\n\n/*\r\n * #1\r\n *\r\n * Задача: Розробити функцію `createPerson`, яка створює об'єкт особи з заданими властивостями.\r\n *\r\n * Мета: Створити універсальну функцію, що дозволяє ефективно генерувати об'єкти особи з певними характеристиками для подальшого використання у програмі.\r\n *\r\n * Вимоги до реалізації:\r\n * 1. Функція має приймати три параметри: `name` (рядок), `age` (число), `isActive` (булеве значення) і явно повертати об'єкт, що відповідає інтерфейсу `PersonInterface`.\r\n * 2. Інтерфейс `PersonInterface` має описувати структуру об'єкта особи з властивостями `name`, `age`, і `isActive`.\r\n * 3. Функція має забезпечувати створення об'єкта з коректними типами властивостей відповідно до `PersonInterface`.\r\n * 4. Тип повернення функції має бути явно вказаний як `PersonInterface`, що забезпечує відповідність повернутого об'єкта визначеному інтерфейсу.\r\n *\r\n */\n\nfunction createPerson(name, age, isActive) {\n  return {\n    name: name,\n    age: age,\n    isActive: isActive\n  };\n}\nvar newPerson = createPerson('Олександр', 31, false);\nconsole.log(newPerson);\n\n/*\r\n * #1\r\n *\r\n * Задача: Розробити клас `Calculator` з методами `add` і `multiply`, які будуть логувати виклики цих методів за допомогою декоратора `LogMethodCalls`.\r\n *\r\n * Мета: Створити клас, що дозволяє виконувати базові арифметичні операції (додавання та множення) та логує деталі їх викликів для подальшого аналізу або дебагінгу.\r\n *\r\n * Вимоги до реалізації:\r\n * 1. Клас `Calculator` має містити метод `add`, який приймає два числа як аргументи та повертає їх суму.\r\n * 2. Клас `Calculator` має містити метод `multiply`, який приймає два числа як аргументи та повертає результат їх множення.\r\n * 3. Обидва методи (`add` і `multiply`) мають бути оздоблені декоратором `LogMethodCalls`. Цей декоратор має логувати ім'я викликаного методу та передані йому аргументи.\r\n * 4. Декоратор `LogMethodCalls` має бути реалізований так, щоб він міг бути застосований до будь-якого методу класу. При виклику методу, оздобленого цим декоратором, має виводитись лог у форматі: `Calling \"<ім'я_методу>\" with arguments: <аргументи_методу>`.\r\n * 5. Всі виводи логів мають здійснюватись через `console.log`.\r\n *\r\n */\n\nfunction LogMethodCalls(target, propertyName, propertyDescriptor) {\n  var originalMethod = propertyDescriptor.value;\n  propertyDescriptor.value = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    console.log(\"Calling \\\"\".concat(propertyName, \"\\\" with arguments: \"), args);\n    var result = originalMethod.apply(this, args);\n    return result;\n  };\n}\nvar Calculator = (_class = /*#__PURE__*/function () {\n  function Calculator() {\n    _classCallCheck(this, Calculator);\n  }\n  return _createClass(Calculator, [{\n    key: \"add\",\n    value: function add(a, b) {\n      return a + b;\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      return a * b;\n    }\n  }]);\n}(), _applyDecoratedDescriptor(_class.prototype, \"add\", [LogMethodCalls], Object.getOwnPropertyDescriptor(_class.prototype, \"add\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"multiply\", [LogMethodCalls], Object.getOwnPropertyDescriptor(_class.prototype, \"multiply\"), _class.prototype), _class);\nvar calculator = new Calculator();\n// \"Calling \"add\" with arguments: 2, 3\"\nconsole.log(calculator.add(2, 3)); // 5\n// \"Calling \"multiply\" with arguments: 3, 4\"\nconsole.log(calculator.multiply(3, 4)); // 12\n\n/*\r\n * #3\r\n *\r\n * Задача: Реалізувати функціонал для створення профілю користувача в просторі імен UserProfile.\r\n *\r\n * Мета: Надати можливість створювати об'єкт профілю з унікальним ідентифікатором, ім'ям та електронною поштою.\r\n *\r\n * Вимоги до реалізації:\r\n * 1. Створити namespace `UserProfile`, що слугуватиме контейнером для визначення інтерфейсу профілю та функцій.\r\n * 2. Визначити всередині `UserProfile` інтерфейс `ProfileInterface`, який має містити властивості `id` (string), `name` (string) та `email` (string).\r\n * 3. Реалізувати функцію `createProfile` всередині `UserProfile`, яка приймає `name` та `email`, створює та повертає об'єкт `ProfileInterface` з унікальним `id`, вказаним ім'ям та електронною поштою.\r\n * 4. Функція `generateId` має бути приватною всередині `UserProfile` і слугувати для генерації унікального ідентифікатора для кожного профілю.\r\n *\r\n */\nvar UserProfile;\n(function (_UserProfile) {\n  var privateId = 0;\n  function generateId(name) {\n    var id = privateId.toString() + name.toLowerCase().replace(/\\s+/g, '');\n    privateId++;\n    return id.split('').sort(function () {\n      return 0.5 - Math.random();\n    }).join('').substring(0, 6);\n    // removed by dead control flow\n{}\n  }\n  function createProfile(name, email) {\n    var id = generateId(name);\n    return {\n      id: id,\n      name: name,\n      email: email\n    };\n  }\n  _UserProfile.createProfile = createProfile;\n})(UserProfile || (UserProfile = {}));\nvar profile = UserProfile.createProfile('John Doe', 'john@example.com');\nconsole.log(profile); // { \"id\": \"e6uvai5egqd\", \"name\": \"John Doe\", \"email\": \"john@example.com\" }\n\n\n\n//# sourceURL=webpack://homework37/./src/main.ts?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("72a955ee3ea0dc69ef8c")
/******/ })();
/******/ 
/******/ }
);